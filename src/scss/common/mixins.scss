@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url("../../fonts/#{$file_name}.woff") format("woff"),
      url("../../fonts/#{$file_name}.woff2") format("woff2");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
@mixin avalue($prop, $startValue, $endValue, $type: 1) {
  $addValue: $startValue - $endValue;
  @if $type == 1 {
    // smaller then the container
    #{$prop}: $startValue + px;
    @media (max-width: #{$maxWidthContainer} + px) {
      #{$prop}: calc(
        #{$endValue + px} + #{$addValue} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type == 2 {
    // larger then the container
    #{$prop}: $startValue + px;
  } @else {
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$prop}: calc(
        #{$endValue + px} + #{$addValue} *
          ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  }
}
@mixin afont($pcSize, $mobSize, $maxSize: 1) {
  $addSize: $pcSize - $mobSize;
  @if $maxSize == 1 {
    font-size: $pcSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      font-size: calc(
        #{$mobSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $maxSize == 2 {
    font-size: $pcSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      font-size: calc(
        #{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  }
  else {
    font-size: calc(
      #{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
@mixin aminfont($startValue, $endValue, $minWidth) {
  // $addValue: $startValue - $endValue;
  // font-size: $startValue + px;
  // @media (min-width: #{$minWidth} + px) {
  //     font-size: calc(
  //         #{$endValue + px} + #{$addValue} *
  //             ((100vw - #{$minWidth + px}) / (#{$maxWidthContainer - $minWidth}))
  //     );
  // }
  @include aminvalue("font-size", $startValue, $endValue, $minWidth);
}
@mixin amaxvalue($prop, $startValue, $endValue, $maxWidth) {
  $addValue: $startValue - $endValue;
  // #{$prop}: $startValue + px;
  @media (max-width: #{$maxWidth} + px) {
    #{$prop}: calc(
      #{$endValue + px} + #{$addValue} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
@mixin aminvalue($prop, $startValue, $endValue, $minWidth) {
  $addValue: $startValue - $endValue;
  // @media (min-width: #{$maxWidthContainer + 1} + px) {
  // #{$prop}: $startValue + px;
  // }
  #{$prop}: $endValue + px;
  @media (min-width: #{$minWidth} + px) and (max-width: #{$maxWidthContainer} + px) {
    // calc(10px + 30px * (1280 - 850)/ 430)
    #{$prop}: calc(
      #{$endValue + px} + #{$addValue} *
        ((100vw - #{$minWidth + px}) / (#{$maxWidthContainer - $minWidth}))
    );
  }
  @media (min-width: #{$maxWidthContainer + 1} + px) {
    #{$prop}: $startValue + px;
  }
}
@mixin aminmaxvalue($prop, $startValue, $endValue, $minWidth, $maxWidth) {
  $addValue: $startValue - $endValue;
  @media (max-width: #{$minWidth - 1} + px) {
    #{$prop}: $endValue + px;
  }
  @media (min-width: #{$minWidth} + px) and (max-width: #{$maxWidth} + px) {
    // calc(10px + 30px * (1280 - 850)/ 430)
    #{$prop}: calc(
      #{$endValue + px} + #{$addValue} *
        ((100vw - #{$minWidth + px}) / (#{$maxWidthContainer - $minWidth}))
    );
  }
  @media (min-width: #{$maxWidth + 1} + px) {
    #{$prop}: $startValue + px;
  }
}

@mixin abs($top: 0, $left: 0) {
  position: absolute;
  top: $top + px;
  left: $left + px;
}
@mixin abs-center($top: 50%, $left: 50%) {
  position: absolute;
  top: $top;
  left: $left;
  transform: translate(-1 * $top, -1 * $left);
}
@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}
@mixin transition($prop: all, $duration: 0.3s) {
  transition: $prop $duration ease 0s;
}
@mixin fon($fontSize, $lineHeight, $fontWeight: null, $letterSpacing: null) {
  font-size: $fontSize + px;
  line-height: math.div($lineHeight, $fontSize);
  @if ($fontWeight != null) {
    font-weight: $fontWeight;
  }
  @if ($letterSpacing != null) {
    letter-spacing: $letterSpacing + px;
  }
}
@mixin size($width, $height: null) {
  width: $width + px;
  @if ($height != null) {
    height: $height + px;
  } @else {
    height: $width + px;
  }
}
@function rem($px) {
  @return math.div($px, 16) + rem;
}
@function em($px1, $px2: 16) {
  @return math.div($px1, $px2) + em;
}
@function pc($px1, $px2) {
  @return math.div($px1, $px2) * 100%;
}
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}